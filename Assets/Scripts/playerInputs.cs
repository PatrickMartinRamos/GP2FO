//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/playerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInputs"",
    ""maps"": [
        {
            ""name"": ""playerMoveController"",
            ""id"": ""7f1fb76e-872f-424b-ba98-48d5aadf752e"",
            ""actions"": [
                {
                    ""name"": ""playerMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9c7b5f37-aa63-46bf-b1ed-f9b6204d8ba5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseAim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a51d24e8-f810-40a8-8914-aa242c8f7e67"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""ab94d9e0-8da8-4206-b549-b30d5ab1bba8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""walk"",
                    ""type"": ""Button"",
                    ""id"": ""89cae619-842d-40c5-b776-1f08d3fdb951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""75877e7a-76f6-4267-8030-6ab043032b78"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""101fcd95-7855-4fa3-bb02-301e9407d720"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f22c96f7-9753-4202-ab7e-148e8f1dfb0e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0f08ab5-6fd2-4e0e-a34f-2117724a1112"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f08503bc-3276-4d85-9405-cfa8368fea27"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89011b91-9e34-4f93-ba33-f95d3a856ad0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2791878a-354d-4e82-812a-2027aba91d66"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf87ab75-721a-4d07-95f3-2ccfcb9f3119"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""003c1db3-2654-4d68-984e-119a535c0847"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""playerActionController"",
            ""id"": ""811c5b80-53d8-40ac-a3f3-dc3f198793e0"",
            ""actions"": [
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""1b927291-78a0-4cf6-9ed9-61eff3bb8cfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""relaod"",
                    ""type"": ""Button"",
                    ""id"": ""0a796746-636c-493e-85b4-7bd6d6291c6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ebbc1be-52ae-49cf-8702-1c1636da2539"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2612c49b-2bca-434d-8d2e-0a18e2fc97b0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3130d6b5-e195-45b5-8f0f-84d08bd386cf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""relaod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // playerMoveController
        m_playerMoveController = asset.FindActionMap("playerMoveController", throwIfNotFound: true);
        m_playerMoveController_playerMovement = m_playerMoveController.FindAction("playerMovement", throwIfNotFound: true);
        m_playerMoveController_mouseAim = m_playerMoveController.FindAction("mouseAim", throwIfNotFound: true);
        m_playerMoveController_Sprint = m_playerMoveController.FindAction("Sprint", throwIfNotFound: true);
        m_playerMoveController_walk = m_playerMoveController.FindAction("walk", throwIfNotFound: true);
        // playerActionController
        m_playerActionController = asset.FindActionMap("playerActionController", throwIfNotFound: true);
        m_playerActionController_shoot = m_playerActionController.FindAction("shoot", throwIfNotFound: true);
        m_playerActionController_relaod = m_playerActionController.FindAction("relaod", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playerMoveController
    private readonly InputActionMap m_playerMoveController;
    private List<IPlayerMoveControllerActions> m_PlayerMoveControllerActionsCallbackInterfaces = new List<IPlayerMoveControllerActions>();
    private readonly InputAction m_playerMoveController_playerMovement;
    private readonly InputAction m_playerMoveController_mouseAim;
    private readonly InputAction m_playerMoveController_Sprint;
    private readonly InputAction m_playerMoveController_walk;
    public struct PlayerMoveControllerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerMoveControllerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @playerMovement => m_Wrapper.m_playerMoveController_playerMovement;
        public InputAction @mouseAim => m_Wrapper.m_playerMoveController_mouseAim;
        public InputAction @Sprint => m_Wrapper.m_playerMoveController_Sprint;
        public InputAction @walk => m_Wrapper.m_playerMoveController_walk;
        public InputActionMap Get() { return m_Wrapper.m_playerMoveController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMoveControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMoveControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMoveControllerActionsCallbackInterfaces.Add(instance);
            @playerMovement.started += instance.OnPlayerMovement;
            @playerMovement.performed += instance.OnPlayerMovement;
            @playerMovement.canceled += instance.OnPlayerMovement;
            @mouseAim.started += instance.OnMouseAim;
            @mouseAim.performed += instance.OnMouseAim;
            @mouseAim.canceled += instance.OnMouseAim;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @walk.started += instance.OnWalk;
            @walk.performed += instance.OnWalk;
            @walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(IPlayerMoveControllerActions instance)
        {
            @playerMovement.started -= instance.OnPlayerMovement;
            @playerMovement.performed -= instance.OnPlayerMovement;
            @playerMovement.canceled -= instance.OnPlayerMovement;
            @mouseAim.started -= instance.OnMouseAim;
            @mouseAim.performed -= instance.OnMouseAim;
            @mouseAim.canceled -= instance.OnMouseAim;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @walk.started -= instance.OnWalk;
            @walk.performed -= instance.OnWalk;
            @walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(IPlayerMoveControllerActions instance)
        {
            if (m_Wrapper.m_PlayerMoveControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMoveControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMoveControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMoveControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMoveControllerActions @playerMoveController => new PlayerMoveControllerActions(this);

    // playerActionController
    private readonly InputActionMap m_playerActionController;
    private List<IPlayerActionControllerActions> m_PlayerActionControllerActionsCallbackInterfaces = new List<IPlayerActionControllerActions>();
    private readonly InputAction m_playerActionController_shoot;
    private readonly InputAction m_playerActionController_relaod;
    public struct PlayerActionControllerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActionControllerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @shoot => m_Wrapper.m_playerActionController_shoot;
        public InputAction @relaod => m_Wrapper.m_playerActionController_relaod;
        public InputActionMap Get() { return m_Wrapper.m_playerActionController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionControllerActionsCallbackInterfaces.Add(instance);
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @relaod.started += instance.OnRelaod;
            @relaod.performed += instance.OnRelaod;
            @relaod.canceled += instance.OnRelaod;
        }

        private void UnregisterCallbacks(IPlayerActionControllerActions instance)
        {
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @relaod.started -= instance.OnRelaod;
            @relaod.performed -= instance.OnRelaod;
            @relaod.canceled -= instance.OnRelaod;
        }

        public void RemoveCallbacks(IPlayerActionControllerActions instance)
        {
            if (m_Wrapper.m_PlayerActionControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionControllerActions @playerActionController => new PlayerActionControllerActions(this);
    public interface IPlayerMoveControllerActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnMouseAim(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface IPlayerActionControllerActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnRelaod(InputAction.CallbackContext context);
    }
}
